# starship
eval "$(starship init zsh)"

# oh-my-zsh
plugins=(git github aliases copypath copyfile colored-man-pages history docker docker-compose composer aws terraform golang ruby brew you-should-use zsh-bat zsh-completions zsh-autosuggestions zsh-syntax-highlighting zsh-abbr)
source $ZSH/oh-my-zsh.sh

# ディレクトリ名だけで移動可能
setopt AUTO_CD
cdpath=(.. ~ ~/src)

# fzf
source <(fzf --zsh)

# pyenv
eval "$(pyenv init -)"

# rbenv
eval "$(rbenv init -)"

# jenv
eval "$(jenv init -)"

# alias
alias ls="eza -aal --icons"
alias cat="bat"
alias sqlite3="/opt/homebrew/opt/sqlite/bin/sqlite3"
alias ghq="ghq 2>/dev/null"

# abbr
abbr lg="lazygit" 2>/dev/null
abbr ta="tmux attach" 2>/dev/null
abbr tk="tmux kill-session" 2>/dev/null
abbr tn="tmux new" 2>/dev/null
abbr c="clear" 2>/dev/null
abbr g="git" 2>/dev/null

# githubのリポジトリを検索して移動
ghfd() {
  local src=$(ghq list 2>/dev/null | fzf --preview "bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*")
  if [ -n "$src" ]; then
    cd "$(ghq root)/$src"
  fi
}

# 現在のフォルダ配下のフォルダを検索して移動
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# gitリポジトリ配下のフォルダを検索して移動
fdgit() {
  local top_dir
  top_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ -z "$top_dir" ]; then
    echo "Not in a Git repository."
    return 1
  fi
  local dir
  dir="$(
    cd "$top_dir" || return 1
    find . -type d -not -path '*/.git/*' 2>/dev/null | fzf
  )"
  [ -z "$dir" ] && return
  cd "$top_dir/$dir"
}

# githubのissueを検索してブラウザで表示
ghi() {
  local issues issue number
  issues="$(gh issue list)" || return 1
  issue="$(echo "$issues" | fzf --preview 'gh issue view {1}' \
    --preview-window=right:60% \
    --preview-window=wrap)" || return 1
  number="${issue%%[[:space:]]*}"
  number="${number#'#'}"
  gh issue view --web "$number"
}

# githubリポジトリをcloneして移動
ghcl() {
  local repo_name="$1"
  if [ -z "$repo_name" ]; then
    echo "Usage: ghcl <repo_name>"
    return 1
  fi
  ghq get "$repo_name" || {
    echo "Error: could not ghq get '$repo_name'"
    return 1
  }
  local repo_path
  repo_path="$(ghq list -p "$repo_name")"
  if [ -n "$repo_path" ]; then
    cd "$repo_path" || {
      echo "Error: could not cd to '$repo_path'"
      return 1
    }
  else
    echo "Error: could not find repository path for '$repo_name'"
    return 1
  fi
}

# githubリポジトリを作成してcloneして移動
ghcr() {
  local repo_name="$1"
  local visibility="${2:-private}"  # private default
  if [ -z "$repo_name" ]; then
    echo "Usage: ghcr <repo_name> [public|private]"
    return 1
  fi
  gh repo create "$repo_name" --"$visibility" --confirm || {
    echo "Error: could not create repository '$repo_name'"
    return 1
  }
  ghq get "$repo_name" || {
    echo "Error: could not ghq get '$repo_name'"
    return 1
  }
  local repo_path
  repo_path="$(ghq list -p "$repo_name")"
  if [ -n "$repo_path" ]; then
    cd "$repo_path" || {
      echo "Error: could not cd to '$repo_path'"
      return 1
    }
  else
    echo "Error: could not find repository path for '$repo_name'"
    return 1
  fi
}

# history
export HISTFILE=${HOME}/.config/zsh/.zsh_history
export HISTSIZE=1000
export SAVEHIST=100000
export HISTFILESIZE=100000
setopt hist_ignore_dups
setopt EXTENDED_HISTORY
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_no_store
setopt hist_expand
setopt share_history
